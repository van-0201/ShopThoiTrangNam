@model ShopThoiTrangNam.Models.Product

@{
    ViewData["Title"] = Model.ProductName;
    var related = ViewBag.RelatedProducts as List<ShopThoiTrangNam.Models.Product>;
    var variants = ViewBag.Variants as List<ShopThoiTrangNam.Models.Product>;
    // Lấy ID gốc (sản phẩm cha) để tìm kiếm các biến thể
    var rootProductId = Model.ParentProductId ?? Model.ProductId;
}

<style>
    /* Ô chọn màu/size */
    .option-box {
        display: inline-block;
        border: 2px solid #ddd;
        border-radius: 8px;
        padding: 8px 16px;
        margin: 5px 6px 5px 0;
        cursor: pointer;
        user-select: none;
        transition: all 0.2s ease-in-out;
        background-color: #fff;
        font-size: 14px;
    }
    .option-box:hover {
        border-color: #007bff;
        box-shadow: 0 0 6px rgba(0, 123, 255, 0.3);
    }
    .option-box.active {
        border-color: #007bff;
        background-color: #007bff;
        color: #fff;
        font-weight: 600;
        transform: scale(1.03);
    }

    /* Mô tả sản phẩm */
    .product-description {
        background-color: #fafafa;
        border: 1px solid #eee;
        border-radius: 10px;
        padding: 20px;
        margin-top: 35px;
        line-height: 1.6;
        font-size: 15px;
        color: #444;
    }
    .product-description h5 {
        font-weight: 600;
        margin-bottom: 12px;
        color: #222;
    }

    /* Sản phẩm liên quan */
    .related-title {
        font-weight: 600;
        font-size: 18px;
        margin-bottom: 12px;
    }
</style>

<div class="container my-5">
    <div class="row g-4">
        <div class="col-md-6 text-center">
            <img id="productImage" src="@Model.ImageUrl" class="img-fluid rounded shadow-sm" style="max-height: 420px; object-fit: cover;"
alt="@Model.ProductName" />
        </div>

        <div class="col-md-6">
            <h3 class="fw-bold mb-2">@Model.ProductName</h3>
            <p id="productPrice" class="text-danger h5 fw-semibold">@Model.Price.ToString("N0") ₫</p>
            <p class="mb-1"><strong>Tồn kho:</strong> <span id="productStock">@Model.StockQuantity</span></p>

            <div class="mb-3">
                <label class="form-label"><strong>Màu sắc:</strong></label><br />
   
             <div id="colorOptions" class="d-flex flex-wrap"> 
                    @foreach (var c in variants.Select(v => v.Color).Where(c => !string.IsNullOrEmpty(c)).Distinct())
                    {
                        var isActive = c == Model.Color ? "active" : "";
                        <div class="option-box color-option @isActive" data-color="@c" data-option-type="color">@c</div>
                    }
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label"><strong>Kích cỡ:</strong></label><br />
            
    <div id="sizeOptions" class="d-flex flex-wrap"> 
                    @foreach (var s in variants.Select(v => v.Size).Where(s => !string.IsNullOrEmpty(s)).Distinct().OrderBy(s => s))
                    {
                        var isActive = s == Model.Size ? "active" : "";
                        <div class="option-box size-option @isActive" data-size="@s" data-option-type="size">@s</div>
                    }
                </div>
            </div>

            <div class="mt-4">
                <button id="addToCartBtn" class="btn btn-primary px-4 me-2" data-product-id="@Model.ProductId" @(Model.StockQuantity == 0 ? "disabled" : "")>
  
                  <i class="bi bi-cart-plus"></i> Thêm vào giỏ
                </button>
                
                <a href="#" id="buyNowBtn" class="btn btn-outline-danger px-4">Mua ngay</a>
                </div>
         </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.Description))
    {
       
 <div class="product-description">
            <h5>Chi tiết sản phẩm</h5>
            <p>@Html.Raw(Model.Description.Replace("\n", "<br>"))</p>
        </div>
    }

    @if (related != null && related.Any())
    {
        <div class="mt-5">
            <div class="related-title">Sản phẩm liên quan</div>
            <div class="row row-cols-2 row-cols-md-4 g-3">
    
            @foreach (var item in related)
                {
                    <div class="col">
                        <div class="card h-100 border-0 shadow-sm">
                   
         <img src="@item.ImageUrl" class="card-img-top" alt="@item.ProductName" style="height: 320px; object-fit: cover;" />
                            <div class="card-body text-center p-2">
                                <h6 class="fw-bold text-truncate">@item.ProductName</h6>
                                <p class="text-danger fw-semibold mb-1">@item.Price.ToString("N0") ₫</p>
                                <a asp-controller="Store" asp-action="Details" asp-route-id="@item.ProductId"
                                   class="btn btn-outline-primary btn-sm w-100">Xem</a>
                        
    </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@section Scripts {
<script>
    // Chờ DOM tải xong
    document.addEventListener('DOMContentLoaded', function () {
   
        // ID gốc của nhóm sản phẩm (sản phẩm cha)
        const rootProductId = @rootProductId;
        
        // Lấy các element DOM
        const productImage = document.getElementById('productImage');
        const productPrice = document.getElementById('productPrice');
        const productStock = document.getElementById('productStock');
        const addToCartBtn = document.getElementById('addToCartBtn');
        const allOptionBoxes = document.querySelectorAll('.option-box');
        
        /**
         * Lấy màu sắc và kích cỡ đang được chọn
         */
        function getSelectedOptions() {
            const activeColor = document.querySelector(".color-option.active");
            const activeSize = document.querySelector(".size-option.active");

            return {
                color: activeColor ? activeColor.dataset.color : null,
                size: activeSize ? activeSize.dataset.size : null
            };
        }

        /**
         * Gọi API để lấy thông tin biến thể (variant)
         */
        async function updateVariant() {
            const { color, size } = getSelectedOptions();

            // Nếu chưa chọn đủ, reset về thông tin gốc
            if (!color || !size) {
                productStock.textContent = "@Model.StockQuantity.ToString()";
                addToCartBtn.disabled = @(Model.StockQuantity == 0 ? "true" : "false");
                addToCartBtn.dataset.productId = @Model.ProductId;
                return;
            }

            // Gọi API 'GetVariant'
            const url = `@Url.Action("GetVariant", "Store")?parentId=${rootProductId}&color=${color}&size=${size}`;
            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error(`Lỗi HTTP! Status: ${response.status}`);
                
                const data = await response.json();

                // Nếu tìm thấy biến thể
                if (data && data.productId > 0) { 
                    productImage.src = data.imageUrl;
                    productPrice.textContent = data.price + " ₫";
                    productStock.textContent = data.stockQuantity;
                    
                    // Cập nhật nút "Thêm vào giỏ"
                    addToCartBtn.dataset.productId = data.productId; 
                    addToCartBtn.disabled = data.stockQuantity === 0; 
                    
                    if (data.stockQuantity === 0) {
                        productStock.textContent = "0 (Hết hàng)";
                    }
                } else {
                    // Nếu không tìm thấy biến thể khớp
                    productStock.textContent = "0 (Hết hàng)";
                    addToCartBtn.disabled = true;
                    addToCartBtn.dataset.productId = 0; 
                }
            } catch (error) {
                console.error("Lỗi khi tải biến thể:", error);
                productStock.textContent = "Lỗi tải dữ liệu";
                addToCartBtn.disabled = true;
            }
        }
        
        /**
         * Xử lý khi nhấn nút "Thêm vào giỏ hàng"
         */
        async function addToCartHandler() {
            const productId = parseInt(addToCartBtn.dataset.productId);

            // Kiểm tra biến thể hợp lệ
            if (productId <= 0 || addToCartBtn.disabled) {
                alert("Vui lòng chọn biến thể sản phẩm hợp lệ và còn hàng.");
                return;
            }

            const quantity = 1;
            const url = '@Url.Action("AddToCart", "ShoppingCart")';
            
            const formData = new URLSearchParams();
            formData.append('productId', productId);
            formData.append('quantity', quantity);

            try {
                // Gọi API AddToCart
                const response = await fetch(url, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        // Header này giúp Program.cs nhận diện là AJAX
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                // Xử lý các mã lỗi HTTP
                if (!response.ok) {
                    if (response.status === 401) { // 401 = Chưa đăng nhập
                        alert("Bạn phải đăng nhập để thêm sản phẩm vào giỏ hàng!");
                        return;
                    }
                    if (response.status === 403) { // 403 = Sai quyền
                        alert("Tài khoản của bạn không có quyền thực hiện việc này!");
                        return;
                    }
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                // Nếu request thành công
                const data = await response.json();
                if (data.success) {
                    // Cập nhật icon giỏ hàng
                    const cartCountBadge = document.getElementById('cart-count-badge');
                    if (cartCountBadge) {
                        cartCountBadge.textContent = data.cartCount;
                    }
                    alert("Đã thêm vào giỏ hàng!");
                } else {
                    alert(data.message || "Có lỗi xảy ra!");
                }
            } catch (error) {
                console.error("Lỗi Fetch/Server:", error);
                alert("Lỗi server, vui lòng thử lại.");
            }
        }

        /**
         * Xử lý khi nhấn nút "Mua Ngay"
         */
        const buyNowBtn = document.getElementById('buyNowBtn');
        if (buyNowBtn) {
            buyNowBtn.addEventListener('click', function(e) {
                e.preventDefault(); 
                
                // Lấy thông tin biến thể từ nút "Thêm vào giỏ"
                const productId = parseInt(addToCartBtn.dataset.productId);
                const isDisabled = addToCartBtn.disabled;
                const quantity = 1; 

                if (productId <= 0 || isDisabled) {
                    alert("Vui lòng chọn biến thể sản phẩm hợp lệ và còn hàng.");
                    return;
                }
                 
                // Chuyển hướng đến trang Thanh toán
                const url = `@Url.Action("Index", "Checkout")?productId=${productId}&quantity=${quantity}`;
                window.location.href = url;
            });
        }

        // --- THIẾT LẬP SỰ KIỆN BAN ĐẦU ---

        // 1. Gán sự kiện 'click' cho các ô chọn
        allOptionBoxes.forEach(box => {
            box.addEventListener("click", function () {
                const optionType = this.dataset.optionType; 
                
                // Xóa 'active' ở các ô cùng loại
                document.querySelectorAll(`.${optionType}-option`).forEach(opt => {
                    opt.classList.remove("active");
                });
    
                // Thêm 'active' cho ô vừa nhấn
                this.classList.add("active");
                
                // Cập nhật biến thể
                updateVariant();
            });
        });
        
        // 2. Gán sự kiện 'click' cho nút "Thêm vào giỏ"
        addToCartBtn.addEventListener('click', addToCartHandler);

        // 3. Chạy hàm update 1 lần khi tải trang
        updateVariant();
    });
</script>
}