@model IEnumerable<ShopThoiTrangNam.Models.ShoppingCart>

@{
    ViewData["Title"] = "Gi·ªè h√†ng c·ªßa b·∫°n";
    decimal totalAmount = Model.Sum(i => i.Price * i.Quantity); 
}

<div class="container my-5">
    <h2 class="fw-bold mb-4 text-center">üõí Gi·ªè h√†ng c·ªßa b·∫°n</h2>

    @if (!Model.Any())
    {
        <div class="alert alert-info text-center">
            Gi·ªè h√†ng c·ªßa b·∫°n hi·ªán ƒëang tr·ªëng. 	
            <a asp-controller="Store" asp-action="Index" class="alert-link">Ti·∫øp t·ª•c mua s·∫Øm</a>.
        </div>
    }
    else
    {
        <table id="cart-table" class="table table-bordered align-middle shadow-sm">
            <thead class="table-dark text-center">
                <tr>
                    <th>·∫¢nh</th>
                    <th>S·∫£n ph·∫©m</th>
                    <th>M√†u</th>
                    <th>Size</th>
                    <th>Gi√°</th>
                    <th>S·ªë l∆∞·ª£ng</th>
                    <th>T·ªïng</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    var product = item.Product;
                    // L·∫•y gi√° d∆∞·ªõi d·∫°ng s·ªë cho JS t√≠nh to√°n
                    <tr class="cart-row" data-cart-id="@item.CartId" data-price="@item.Price.ToString(System.Globalization.CultureInfo.InvariantCulture)">
                        <td style="width:120px; text-align:center;">
                            <img src="@product?.ImageUrl" alt="@product?.ProductName" class="img-thumbnail" style="width:100px; height:100px; object-fit:cover;" />
                        </td>
                        <td>
                            <strong>@product?.ProductName</strong><br />
                            <small class="text-muted">@product?.Category?.CategoryName</small>
                        </td>
                        <td class="text-center">@item.Color</td>
                        <td class="text-center">@item.Size</td>
                        <td class="text-end text-danger item-price">@item.Price.ToString("N0") ‚Ç´</td>
                        <td class="text-center" style="width:140px;">
                            <input type="number" 
                                            name="quantity" 
                                            value="@item.Quantity" 
                                            min="1" 
                                            class="form-control text-center quantity-input" 
                                            data-cart-id="@item.CartId"
                                            style="width:80px; display:inline-block;" />
                        </td>
                        <td class="text-end fw-bold text-primary item-total">@((item.Price * item.Quantity).ToString("N0")) ‚Ç´</td>
                        <td class="text-center">
                            <form asp-action="Remove" method="post" onsubmit="return confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh·ªèi gi·ªè h√†ng?');">
                                <input type="hidden" name="id" value="@item.CartId" />
                                <button type="submit" class="btn btn-outline-danger btn-sm">X√≥a</button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="d-flex justify-content-between align-items-center mt-4">
            <a asp-controller="Store" asp-action="Index" class="btn btn-outline-secondary">‚Üê Ti·∫øp t·ª•c mua s·∫Øm</a>

            <div class="text-end">
                <h5 class="fw-bold">
                    T·ªïng c·ªông: 
                    <span class="text-danger" id="grand-total">@totalAmount.ToString("N0") ‚Ç´</span>
                </h5>
                <a href="#" class="btn btn-success px-4 mt-2">Thanh to√°n</a>
            </div>
        </div>
    }
</div>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // H√†m ƒë·ªãnh d·∫°ng s·ªë ti·ªÅn (ƒê·∫£m b·∫£o ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá Vi·ªát Nam)
        function formatCurrency(number) {
            return number.toLocaleString('vi-VN');
        }

        // H√†m c·∫≠p nh·∫≠t t·ªïng ti·ªÅn cho m·ªôt h√†ng v√† T·ªïng c·ªông chung
        function updateTotals(cartId, newQuantity) {
            const row = document.querySelector(`.cart-row[data-cart-id="${cartId}"]`);
            if (!row) return;

            // ƒê·∫£m b·∫£o d·∫•u th·∫≠p ph√¢n l√† d·∫•u ch·∫•m ƒë·ªÉ parseFloat ho·∫°t ƒë·ªông ch√≠nh x√°c
            const price = parseFloat(row.dataset.price.replace(/,/g, '.'));
            
            if (isNaN(price)) return;

            const itemTotal = price * newQuantity;

            // 1. C·∫≠p nh·∫≠t T·ªïng ti·ªÅn c·ªßa h√†ng
            row.querySelector('.item-total').textContent = formatCurrency(itemTotal) + ' ‚Ç´';

            // 2. C·∫≠p nh·∫≠t T·ªïng c·ªông chung
            let grandTotal = 0;
            document.querySelectorAll('.cart-row').forEach(function(cartRow) {
                const rowPrice = parseFloat(cartRow.dataset.price.replace(/,/g, '.'));
                const rowQuantity = parseInt(cartRow.querySelector('.quantity-input').value);
                if (!isNaN(rowPrice) && !isNaN(rowQuantity)) {
                    grandTotal += rowPrice * rowQuantity;
                }
            });

            document.getElementById('grand-total').textContent = formatCurrency(grandTotal) + ' ‚Ç´';
        }

        // H√†m g·ªçi Fetch API ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng trong DB
        async function updateQuantityInDb(cartId, quantity) {
            const url = '@Url.Action("UpdateQuantity", "ShoppingCart")';

            // S·ª≠a l·ªói: S·ª≠ d·ª•ng URLSearchParams ƒë·ªÉ g·ª≠i d·ªØ li·ªáu d∆∞·ªõi d·∫°ng form data
            const formData = new URLSearchParams();
            formData.append('id', cartId);
            formData.append('quantity', quantity);

            try {
                // Controller mong ƒë·ª£i d·ªØ li·ªáu d∆∞·ªõi d·∫°ng Form Data/Query String, kh√¥ng ph·∫£i JSON.
                const response = await fetch(url, {
                    method: 'POST',
                    // B·ªè 'Content-Type': 'application/json' ƒë·ªÉ g·ª≠i form data
                    body: formData 
                });

                // X·ª≠ l√Ω l·ªói HTTP (4xx, 5xx)
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();

                if (data.success) {
                    console.log("C·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng!");
                } else {
                    // X·ª≠ l√Ω l·ªói logic (v√≠ d·ª•: s·ªë l∆∞·ª£ng v∆∞·ª£t qu√° t·ªìn kho)
                    alert(data.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t gi·ªè h√†ng.");
                    // T·∫£i l·∫°i trang ƒë·ªÉ ƒë·ªìng b·ªô
                    location.reload(); 
                }
            } catch (error) {
                console.error("L·ªói server khi c·∫≠p nh·∫≠t gi·ªè h√†ng:", error);
                alert("L·ªói server khi c·∫≠p nh·∫≠t gi·ªè h√†ng.");
                location.reload(); 
            }
        }

        // ----------------------------------------------------
        // X·ª≠ l√Ω s·ª± ki·ªán khi s·ªë l∆∞·ª£ng thay ƒë·ªïi (Fetch API)
        // ----------------------------------------------------
        let timeout = null;
        
        document.querySelectorAll('.quantity-input').forEach(inputElement => {
            inputElement.addEventListener('input', function () {
                const cartId = this.dataset.cartId;
                let newQuantity = parseInt(this.value);

                if (newQuantity < 1 || isNaN(newQuantity)) {
                    newQuantity = 1;
                    this.value = 1;
                }

                // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn t·ª©c th√¨ tr√™n giao di·ªán
                updateTotals(cartId, newQuantity);

                // X√≥a timeout c≈© n·∫øu c√≥ (debounce)
                if (timeout) {
                    clearTimeout(timeout);
                }

                // ƒê·∫∑t timeout m·ªõi ƒë·ªÉ g·ªçi Fetch API sau 500ms
                timeout = setTimeout(function () {
                    // G·ªçi h√†m Fetch API
                    updateQuantityInDb(cartId, newQuantity);
                }, 500);
            });
        });
    });
</script>
}