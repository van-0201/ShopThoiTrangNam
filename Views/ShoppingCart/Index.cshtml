@model IEnumerable<ShopThoiTrangNam.Models.ShoppingCart>

@{
    ViewData["Title"] = "Gi·ªè h√†ng c·ªßa b·∫°n";
}

<div class="container my-5">
    <h2 class="fw-bold mb-4 text-center">üõí Gi·ªè h√†ng c·ªßa b·∫°n</h2>

    @if (!Model.Any())
    {
        <div class="alert alert-info text-center">
            Gi·ªè h√†ng c·ªßa b·∫°n hi·ªán ƒëang tr·ªëng.
            <a asp-controller="Store" asp-action="Index" class="alert-link">Ti·∫øp t·ª•c mua s·∫Øm</a>.
        </div>
    }
    else
    {
        <table id="cart-table" class="table table-bordered align-middle shadow-sm">
            <thead class="table-dark text-center">
                <tr>
                    <th style="width: 50px;">
                        <input class="form-check-input" type="checkbox" id="check-all" />
                    </th>
                    <th>·∫¢nh</th>
                    <th>S·∫£n ph·∫©m</th>
                    <th>M√†u</th>
                    <th>Size</th>
                    <th>Gi√°</th>
                    <th>S·ªë l∆∞·ª£ng</th>
                    <th>T·ªïng</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    var product = item.Product;
                    // Thu·ªôc t√≠nh data-price d√πng ƒë·ªÉ JS t√≠nh to√°n
                    <tr class="cart-row" data-cart-id="@item.CartId" data-price="@item.Price.ToString(System.Globalization.CultureInfo.InvariantCulture)">
                        
                        <td class="text-center">
                            <input class="form-check-input item-checkbox" type="checkbox" data-cart-id="@item.CartId" />
                        </td>
                        <td style="width:120px; text-align:center;">
                            <img src="@product?.ImageUrl" alt="@product?.ProductName" class="img-thumbnail" style="width:100px; height:100px; object-fit:cover;" />
                        </td>
                        <td>
                            <strong>@product?.ProductName</strong><br />
                            <small class="text-muted">@product?.Category?.CategoryName</small>
                        </td>
                        <td class="text-center">@item.Color</td>
                        <td class="text-center">@item.Size</td>
                        <td class="text-end text-danger item-price">@item.Price.ToString("N0") ‚Ç´</td>
                        <td class="text-center" style="width:140px;">
                            <input type="number" 
                                    name="quantity" 
                                    value="@item.Quantity" 
                                    min="1" 
                                    class="form-control text-center quantity-input" 
                                    data-cart-id="@item.CartId"
                                    style="width:80px; display:inline-block;" />
                        </td>
                        <td class="text-end fw-bold text-primary item-total">@((item.Price * item.Quantity).ToString("N0")) ‚Ç´</td>
                        <td class="text-center">
                            <form asp-action="Remove" method="post" onsubmit="return confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh·ªèi gi·ªè h√†ng?');">
                                <input type="hidden" name="id" value="@item.CartId" />
                                <button type="submit" class="btn btn-outline-danger btn-sm">X√≥a</button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="d-flex justify-content-between align-items-center mt-4">
            <a asp-controller="Store" asp-action="Index" class="btn btn-outline-secondary">‚Üê Ti·∫øp t·ª•c mua s·∫Øm</a>

            <div class="text-end">
                <h5 class="fw-bold">
                    T·ªïng c·ªông: 
                    <span class="text-danger" id="grand-total">0 ‚Ç´</span>
                </h5>
                <a href="#" id="checkout-btn" class="btn btn-outline-danger px-4 disabled">Mua ngay</a>
            </div>
        </div>
    }
</div>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function () {
        
        // L·∫•y c√°c ph·∫ßn t·ª≠ DOM
        const checkAllBox = document.getElementById('check-all');
        const itemCheckBoxes = document.querySelectorAll('.item-checkbox');
        const quantityInputs = document.querySelectorAll('.quantity-input');
        const grandTotalEl = document.getElementById('grand-total');
        const checkoutBtn = document.getElementById('checkout-btn');
        let debounceTimeout = null;

        // 1. H√ÄM ƒê·ªäNH D·∫†NG TI·ªÄN T·ªÜ (An to√†n)
        function formatCurrency(number) {
            const numericValue = Number(number);
            if (isNaN(numericValue)) {
                return "0 ‚Ç´"; // Tr·∫£ v·ªÅ 0 ‚Ç´ n·∫øu kh√¥ng ph·∫£i l√† s·ªë
            }
            // Th√™m ' ‚Ç´' v√†o cu·ªëi
            return numericValue.toLocaleString('vi-VN') + ' ‚Ç´';
        }

        // 2. H√ÄM T√çNH TO√ÅN V√Ä C·∫¨P NH·∫¨T T·ªîNG TI·ªÄN
        function updateGrandTotal() {
            let grandTotal = 0;
            let itemsSelected = 0;

            document.querySelectorAll('.cart-row').forEach(function(cartRow) {
                const checkbox = cartRow.querySelector('.item-checkbox');
                
                if (checkbox && checkbox.checked) {
                    const rowPrice = parseFloat(cartRow.dataset.price.replace(/,/g, '.'));
                    // Th√™m 10 ƒë·ªÉ ƒë·∫£m b·∫£o parseInt d√πng h·ªá th·∫≠p ph√¢n
                    const rowQuantity = parseInt(cartRow.querySelector('.quantity-input').value, 10); 
                    
                    if (!isNaN(rowPrice) && !isNaN(rowQuantity)) {
                        grandTotal += rowPrice * rowQuantity;
                        itemsSelected++;
                    }
                }
            });

            // C·∫≠p nh·∫≠t text T·ªïng c·ªông
            grandTotalEl.textContent = formatCurrency(grandTotal);

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t "Mua ngay"
            if (itemsSelected > 0) {
                checkoutBtn.classList.remove('disabled');
            } else {
                checkoutBtn.classList.add('disabled');
            }

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t "Ch·ªçn t·∫•t c·∫£"
            if (checkAllBox && itemCheckBoxes.length > 0) {
                
                // === S·ª¨A L·ªñI TYPO (itemCheckBoxES -> itemCheckBoxes) ===
                if (itemsSelected === itemCheckBoxes.length) { 
                    checkAllBox.checked = true;
                    checkAllBox.indeterminate = false; 
                } else if (itemsSelected > 0) {
                    checkAllBox.checked = false;
                    checkAllBox.indeterminate = true; 
                } else {
                    checkAllBox.checked = false;
                    checkAllBox.indeterminate = false;
                }
            }
        }

        // 3. H√ÄM G·ªåI API C·∫¨P NH·∫¨T S·ªê L∆Ø·ª¢NG
        async function updateQuantityInDb(cartId, quantity) {
            const url = '@Url.Action("UpdateQuantity", "ShoppingCart")';
            const formData = new URLSearchParams();
            formData.append('id', cartId);
            formData.append('quantity', quantity);

            try {
                const response = await fetch(url, {
                    method: 'POST',
                    body: formData
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.success) {
                    console.log("C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng!");
                } else {
                    alert(data.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t gi·ªè h√†ng.");
                    location.reload();
                }
            } catch (error) {
                console.error("L·ªói server khi c·∫≠p nh·∫≠t gi·ªè h√†ng:", error);
                alert("L·ªói server khi c·∫≠p nh·∫≠t gi·ªè h√†ng.");
                location.reload(); 
            }
        }

        // --- G√ÅN S·ª∞ KI·ªÜN ---

        // 4. S·ª∞ KI·ªÜN KHI THAY ƒê·ªîI S·ªê L∆Ø·ª¢NG
        quantityInputs.forEach(inputElement => {
            inputElement.addEventListener('input', function () {
                const cartId = this.dataset.cartId;
                let newQuantity = parseInt(this.value, 10);

                if (newQuantity < 1 || isNaN(newQuantity)) {
                    newQuantity = 1; 
                    this.value = 1;
                }

                // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn c·ªßa h√†ng
                const row = this.closest('.cart-row');
                const price = parseFloat(row.dataset.price.replace(/,/g, '.'));
                if (!isNaN(price)) {
                    const itemTotal = price * newQuantity;
                    row.querySelector('.item-total').textContent = formatCurrency(itemTotal);
                }

                // C·∫≠p nh·∫≠t T·ªîNG C·ªòNG CHUNG (ch·ªâ khi item n√†y ƒë∆∞·ª£c check)
                updateGrandTotal();

                // Debounce g·ªçi API
                if (debounceTimeout) clearTimeout(debounceTimeout);
                debounceTimeout = setTimeout(function () {
                    updateQuantityInDb(cartId, newQuantity);
                }, 500); // 500ms
            });
        });

        // 5. S·ª∞ KI·ªÜN KHI B·∫§M CHECKBOX "CH·ªåN T·∫§T C·∫¢"
        if(checkAllBox) {
            checkAllBox.addEventListener('change', function () {
                const isChecked = this.checked;
                itemCheckBoxes.forEach(box => {
                    box.checked = isChecked;
                });
                updateGrandTotal();
            });
        }

        // 6. S·ª∞ KI·ªÜN KHI B·∫§M CHECKBOX C·ª¶A T·ª™NG M·ª§C
        itemCheckBoxes.forEach(box => {
            box.addEventListener('change', function () {
                updateGrandTotal();
            });
        });
        
        // 7. S·ª∞ KI·ªÜN KHI B·∫§M N√öT "MUA NGAY" (Checkout)
        if(checkoutBtn) {
            checkoutBtn.addEventListener('click', function(e) {
                e.preventDefault(); 
                
                if (this.classList.contains('disabled')) {
                    alert("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m ƒë·ªÉ thanh to√°n.");
                    return;
                }

                const selectedIds = [];
                document.querySelectorAll('.item-checkbox:checked').forEach(cb => {
                    selectedIds.push(cb.dataset.cartId);
                });

                if (selectedIds.length === 0) {
                    alert("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m ƒë·ªÉ thanh to√°n.");
                    return;
                }
                
                const params = new URLSearchParams();
                selectedIds.forEach(id => {
                    params.append('cartItemIds', id);
                });

                const url = `@Url.Action("Index", "Checkout")?${params.toString()}`;
                
                window.location.href = url;
            });
        }
        
        // G·ªçi l·∫ßn ƒë·∫ßu khi t·∫£i trang ƒë·ªÉ t√≠nh t·ªïng ti·ªÅn (ban ƒë·∫ßu l√† 0)
        updateGrandTotal();

    });
</script>
}